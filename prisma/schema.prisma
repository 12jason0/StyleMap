// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================
// User & Related Models
// ===============================================

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique @db.VarChar(191)
  password          String?             @db.VarChar(255)
  username          String              @map("nickname") @db.VarChar(50) // DB의 nickname 컬럼과 매핑
  profileImageUrl   String?             @db.Text
  socialId          String?             @db.VarChar(255)
  provider          String              @default("local") @db.VarChar(20)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  mbti              String?             @db.VarChar(20)
  age               Int?

  // Relations
  courses           Course[]
  reviews           Review[]
  bookings          Booking[]
  userPreference    UserPreference?
  userFavorites     UserFavorite[]
  userBadges        UserBadge[]
  userStoryProgress UserStoryProgress[]
  missionSubmissions MissionSubmission[]
  completedCourses  CompletedCourse[]
  completedEscapes  CompletedEscape[]

  @@map("users")
  @@index([provider, socialId])
}

model UserPreference {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique @map("user_id")
  preferences Json     @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// ===============================================
// Course & Place Models
// ===============================================

model Course {
  id                   Int      @id @default(autoincrement())
  userId               Int?
  title                String   @db.VarChar(100)
  description          String?  @db.Text
  imageUrl             String?  @db.VarChar(255)
  region               String?  @db.VarChar(50)
  duration             String?  @db.VarChar(45)
  price                String?  @db.VarChar(100)
  concept              String?  @db.VarChar(45)
  isPopular            Boolean  @default(false)
  rating               Float    @default(0.0) @db.DoublePrecision
  current_participants Int      @default(0)
  max_participants     Int      @default(0)
  view_count           Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user                 User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedCourses     CompletedCourse[]
  reviews              Review[]
  bookings             Booking[]
  userFavorites        UserFavorite[]
  coursePlaces         CoursePlace[]
  highlights           Highlight[]
  benefits             Benefit[]
  courseNotices        CourseNotice[]
  tags                 CourseTag[]       @relation(map: "_CourseTagToCourses")
  
  @@map("courses")
}

model Place {
  id                   Int       @id @default(autoincrement())
  name                 String    @db.VarChar(255)
  address              String?   @db.VarChar(500)
  description          String?   @db.Text
  category             String?   @db.VarChar(100)
  avg_cost_range       String?   @db.VarChar(100)
  opening_hours        String?   @db.VarChar(200)
  phone                String?   @db.VarChar(50)
  website              String?   @db.VarChar(500)
  parking_available    Boolean?  @default(false)
  reservation_required Boolean?  @default(false)
  latitude             Float?    @db.DoublePrecision
  longitude            Float?    @db.DoublePrecision
  imageUrl             String?   @db.VarChar(500)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  tags                 String?   @db.Text
  
  coursePlaces         CoursePlace[]

  @@map("places")
}

model CourseTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now())

  courses   Course[] @relation(map: "_CourseTagToCourses")

  @@map("course_tags")
}

// ===============================================
// Story & Escape Models
// ===============================================

model Story {
  id                       Int                @id @default(autoincrement())
  title                    String             @db.VarChar(255)
  synopsis                 String?            @db.Text
  region                   String?            @db.VarChar(100)
  estimated_duration_min   Int?
  price                    String?            @db.VarChar(100)
  reward_badge_id          Int?
  is_active                Boolean            @default(true)
  created_at               DateTime           @default(now())
  updated_at               DateTime           @updatedAt
  imageUrl                 String?            @db.Text
  level                    Int?               @default(1)
  epilogue_text            String?            @db.Text

  reward_badge             Badge?             @relation(fields: [reward_badge_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  storychapters            StoryChapter[]
  userstoryprogress        UserStoryProgress[]
  completedEscapes         CompletedEscape[]

  @@map("stories")
}

model StoryChapter {
  id                Int                 @id @default(autoincrement())
  story_id          Int
  chapter_number    Int
  title             String              @db.VarChar(255)
  location_name     String?             @db.VarChar(255)
  address           String?             @db.Text
  latitude          Float?              @db.DoublePrecision
  longitude         Float?              @db.DoublePrecision
  story_text        String?             @db.Text
  mission_type      String?             @db.VarChar(50)
  mission_payload   Json?               @db.JsonB
  puzzle_text       String?             @db.Text

  story               Story               @relation(fields: [story_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  missionSubmissions  MissionSubmission[]

  @@map("storychapters")
  @@unique([story_id, chapter_number])
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  image_url   String?  @db.VarChar(500)

  stories     Story[]
  userBadges  UserBadge[]

  @@map("badges")
}

// ===============================================
// Join Tables & Other Models
// ===============================================

model CompletedCourse {
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  completedAt DateTime @default(now())

  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("CompletedCourses")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("reviews")
}

model Booking {
  id           Int      @id @default(autoincrement())
  user_id      Int
  course_id    Int
  course_title String   @db.VarChar(255)
  booking_date DateTime @db.Date
  status       String   @db.VarChar(45)
  price        String   @db.VarChar(50)
  participants Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  course       Course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("bookings")
}

model UserFavorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())

  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_favorites")
  @@unique([user_id, course_id], name: "unique_user_course")
}

model CoursePlace {
  id                 Int      @id @default(autoincrement())
  course_id          Int
  place_id           Int
  order_index        Int
  estimated_duration Int?
  recommended_time   String?  @db.VarChar(100)
  notes              String?  @db.Text
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  course             Course   @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  place              Place    @relation(fields: [place_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("course_places")
}

model Highlight {
  id          Int      @id @default(autoincrement())
  course_id   Int
  title       String   @db.VarChar(255)
  description String?  @db.Text
  icon        String?  @db.VarChar(10)
  created_at  DateTime @default(now())
  
  course      Course   @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("highlights")
}

model Benefit {
  id            Int      @id @default(autoincrement())
  course_id     Int
  benefit_text  String   @db.Text
  category      String?  @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  
  course        Course   @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("benefits")
}

model CourseNotice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String   @db.Text
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  
  course        Course   @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("course_notices")
}

model UserStoryProgress {
  id              Int       @id @default(autoincrement())
  user_id         Int
  story_id        Int
  current_chapter Int
  status          String    @db.VarChar(30)
  started_at      DateTime?
  completed_at    DateTime?
  
  story           Story     @relation(fields: [story_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user            User      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("userstoryprogress")
  @@unique([user_id, story_id])
}

model MissionSubmission {
  id           Int       @id @default(autoincrement())
 userId       Int       @map("user_id")
  chapterId    Int       @map("chapter_id")
  photoUrl     String?   @map("photo_url") @db.Text
  textAnswer   String?   @map("text_answer") @db.Text
  isCorrect    Boolean   @default(false) @map("is_correct")
  createdAt    DateTime  @default(now()) @map("created_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapter      StoryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("mission_submissions")
}

model UserBadge {
  id         Int      @id @default(autoincrement())
  user_id    Int
  badge_id   Int
  awarded_at DateTime @default(now())
  
  badge      Badge    @relation(fields: [badge_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_badges")
  @@unique([user_id, badge_id])
}

model CompletedEscape {
  id          Int      @id @default(autoincrement())
  userId      Int
  storyId     Int
  completedAt DateTime @default(now())

  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@map("CompletedEscapes")
}