// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique @db.VarChar(100)
  password        String   @db.VarChar(255)
  nickname        String   @unique @db.VarChar(50)
  profileImageUrl String?  @db.VarChar(255)
  provider        String   @default("local") @db.VarChar(20)
  createdAt       DateTime @default(now()) @db.Timestamp(0)

  // Relations
  courses   Courses[]
  reviews   Review[]
  bookings  Booking[]
}

model Courses {
  id                   Int      @id @default(autoincrement())
  userId               Int?
  title                String   @db.VarChar(100)
  description          String?  @db.Text
  imageUrl             String?  @db.VarChar(255)
  region               String?  @db.VarChar(50)
  duration             String?  @db.VarChar(45)
  price                String?  @db.VarChar(45)
  concept              String?  @db.VarChar(45)
  isPopular            Boolean  @default(false)
  rating               Decimal  @default(0.0) @db.Decimal(2, 1)
  current_participants Int      @default(0)
  max_participants     Int      @default(0)
  createdAt            DateTime @default(now()) @db.Timestamp(0)
  updatedAt            DateTime @updatedAt @db.Timestamp(0)

  // Relations
  creator   User?     @relation(fields: [userId], references: [id])
  reviews   Review[]
  bookings  Booking[]

  @@map("courses")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  // Relations
  user   User     @relation(fields: [userId], references: [id])
  course Courses  @relation(fields: [courseId], references: [id])
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  status    String   @default("pending") @db.VarChar(45)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  // Relations
  user   User     @relation(fields: [userId], references: [id])
  course Courses  @relation(fields: [courseId], references: [id])
}
