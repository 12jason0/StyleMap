// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique @db.VarChar(100)
  password        String   @db.VarChar(255)
  nickname        String   @unique @db.VarChar(50)
  profileImageUrl String?  @db.VarChar(255)
  provider        String   @default("local") @db.VarChar(20)
  createdAt       DateTime @default(now()) @db.Timestamp(0)

  // Relations
  courses   Courses[]
  reviews   Review[]
  bookings  Booking[]
}

model Courses {
  id                   Int      @id @default(autoincrement())
  userId               Int?
  title                String   @db.VarChar(100)
  description          String?  @db.Text
  imageUrl             String?  @db.VarChar(255)
  region               String?  @db.VarChar(50)
  duration             String?  @db.VarChar(45)
  price                String?  @db.VarChar(45)
  concept              String?  @db.VarChar(45)
  isPopular            Boolean  @default(false)
  rating               Decimal  @default(0.0) @db.Decimal(2, 1)
  current_participants Int      @default(0)
  max_participants     Int      @default(0)
  createdAt            DateTime @default(now()) @db.Timestamp(0)
  updatedAt            DateTime @updatedAt @db.Timestamp(0)

  // Relations
  creator   User?     @relation(fields: [userId], references: [id])
  reviews   Review[]
  bookings  Booking[]
  tags      CourseTag[]

  @@map("courses")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  // Relations
  user   User     @relation(fields: [userId], references: [id])
  course Courses  @relation(fields: [courseId], references: [id])
}

model Booking {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  courseId      String   @db.VarChar(100) @map("course_id")
  courseTitle   String   @db.VarChar(255) @map("course_title")
  bookingDate   DateTime @map("booking_date")
  status        String   @db.VarChar(45)
  price         String   @db.VarChar(50)
  participants  Int
  createdAt     DateTime @default(now()) @db.Timestamp(0) @map("created_at")
  updatedAt     DateTime @updatedAt @db.Timestamp(0) @map("updated_at")

  @@map("bookings")
}

// AI 추천 시스템을 위한 테이블들
model UserPreferences {
  id         Int      @id @default(autoincrement())
  userId     String   @unique @db.VarChar(100)
  preferences Json    @db.Json
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @db.Timestamp(0)

  @@map("user_preferences")
}

model UserBehavior {
  id                    Int      @id @default(autoincrement())
  userId                String   @unique @db.VarChar(100)
  viewedCourses         Json     @default("[]") @db.Json
  bookedCourses         Json     @default("[]") @db.Json
  likedCourses          Json     @default("[]") @db.Json
  searchHistory         Json     @default("[]") @db.Json
  timeSpent             Json     @default("{}") @db.Json
  preferences           Json     @default("{}") @db.Json
  lastActiveAt          DateTime @default(now()) @db.Timestamp(0)
  lastRecommendationAt  DateTime?
  createdAt             DateTime @default(now()) @db.Timestamp(0)
  updatedAt             DateTime @updatedAt @db.Timestamp(0)

  // Relations
  trackingEvents TrackingEvent[]

  @@map("user_behavior")
}

model TrackingEvent {
  id          Int      @id @default(autoincrement())
  userId      String   @db.VarChar(100)
  eventType   String   @db.VarChar(50)
  courseId    String?  @db.VarChar(100)
  searchQuery String?  @db.Text
  timeSpent   Int?
  metadata    Json     @default("{}") @db.Json
  timestamp   DateTime @default(now()) @db.Timestamp(0)

  // Relations
  userBehavior UserBehavior @relation(fields: [userId], references: [userId])

  @@map("tracking_events")
}

model CourseTag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp(0)

  // Relations
  courses Courses[]

  @@map("course_tags")
}

/// Places table
model Place {
  id                   Int       @id @default(autoincrement())
  name                 String    @db.VarChar(255)
  address              String?   @db.VarChar(500)
  description          String?   @db.Text
  category             String?   @db.VarChar(100)
  avg_cost_range       String?   @db.VarChar(100)
  opening_hours        String?   @db.VarChar(200)
  phone                String?   @db.VarChar(50)
  website              String?   @db.VarChar(500)
  parking_available    Boolean?  @default(false)
  reservation_required Boolean?  @default(false)
  latitude             Decimal?  @db.Decimal(10, 8)
  longitude            Decimal?  @db.Decimal(11, 8)
  image_url            String?   @db.VarChar(500)
  created_at           DateTime  @default(now()) @db.Timestamp(0)
  updated_at           DateTime  @updatedAt @db.Timestamp(0)

  @@map("places")
}

/// Courses - Places pivot
model CoursePlace {
  id                Int      @id @default(autoincrement())
  course_id         Int
  place_id          Int
  order_index       Int
  estimated_duration Int?
  recommended_time  String?  @db.VarChar(100)
  notes             String?  @db.Text
  created_at        DateTime @default(now()) @db.Timestamp(0)
  updated_at        DateTime @updatedAt @db.Timestamp(0)

  @@map("course_places")
}

model Highlight {
  id          Int      @id @default(autoincrement())
  course_id   Int
  title       String   @db.VarChar(255)
  description String?  @db.Text
  icon        String?  @db.VarChar(10)
  created_at  DateTime @default(now()) @db.Timestamp(0)

  @@map("highlights")
}

model Benefit {
  id            Int      @id @default(autoincrement())
  course_id     Int
  benefit_text  String   @db.Text
  category      String?  @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)

  @@map("benefits")
}

model Notice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String   @db.Text
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)

  @@map("notices")
}

model CourseNotice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String   @db.Text
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @updatedAt @db.Timestamp(0)

  @@map("course_notices")
}

model Contact {
  id          Int      @id @default(autoincrement())
  course_id   Int
  type        String?  @db.VarChar(100)
  icon        String?  @db.VarChar(10)
  label       String?  @db.VarChar(255)
  value       String?  @db.VarChar(500)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamp(0)

  @@map("contacts")
}

model UserFavorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@unique([user_id, course_id])
  @@map("user_favorites")
}
