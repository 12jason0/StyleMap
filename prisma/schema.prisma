generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String?             @unique @db.VarChar(191)
  password            String?             @db.VarChar(255)
  nickname            String              @db.VarChar(50)
  profileImageUrl     String?
  socialId            String?             @db.VarChar(255)
  provider            String              @default("local") @db.VarChar(20)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  mbti                String?             @db.VarChar(20)
  age                 Int?
  reviews             Review[]
  courses             Courses[]
  user_story_progress UserStoryProgress[]
  preferences         UserPreferences?
  user_favorites      UserFavorite[]
  bookings            Booking[]
  // --- ⬇️ 추가된 부분 ⬇️ ---
  missionSubmissions  MissionSubmission[]

  @@index([provider, socialId])
  @@map("users")
}

model Courses {
  id                     Int            @id @default(autoincrement())
  userId                 Int?
  title                  String         @db.VarChar(100)
  description            String?        @db.Text
  imageUrl               String?        @db.VarChar(255)
  region                 String?        @db.VarChar(50)
  duration               String?        @db.VarChar(45)
  price                  String?        @db.VarChar(100)
  concept                String?        @db.VarChar(45)
  isPopular              Boolean        @default(false)
  rating                 Float          @default(0.0)
  current_participants   Int            @default(0)
  max_participants       Int            @default(0)
  view_count             Int            @default(0)
  createdAt              DateTime       @default(now()) @map("createdAt")
  updatedAt              DateTime       @updatedAt @map("updatedAt")
  reviews                Review[]
  benefits               Benefit[]
  course_notices         CourseNotice[]
  course_places          CoursePlace[]
  creator                User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  highlights             Highlight[]
  notices                Notice[]
  user_favorites         UserFavorite[]
  tags                   CourseTag[]    @relation("CourseTagToCourses")
  bookings               Booking[]
  contacts               Contact[]

  @@map("courses")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("userId")
  courseId  Int      @map("courseId")
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  course    Courses  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Booking {
  id           Int      @id @default(autoincrement())
  user_id      Int
  course_id    Int
  course_title String   @db.VarChar(255)
  booking_date DateTime @db.Date
  status       String   @db.VarChar(45)
  price        String   @db.VarChar(50)
  participants Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course       Courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model UserPreferences {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences Json
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")

  @@map("user_preferences")
}

model UserFavorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  course     Courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id], map: "unique_user_course")
  @@map("user_favorites")
}

/// Restored models required by application code and existing relations

model CourseTag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("createdAt")
  courses   Courses[] @relation("CourseTagToCourses")

  @@map("course_tags")
}

model Place {
  id                   Int           @id @default(autoincrement())
  name                 String        @db.VarChar(255)
  address              String?       @db.VarChar(500)
  description          String?
  category             String?       @db.VarChar(100)
  avg_cost_range       String?       @db.VarChar(100)
  opening_hours        String?       @db.VarChar(200)
  phone                String?       @db.VarChar(50)
  website              String?       @db.VarChar(500)
  parking_available    Boolean?      @default(false)
  reservation_required Boolean?      @default(false)
  latitude             Float?
  longitude            Float?
  imageUrl             String?       @db.VarChar(500)
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  tags                 String?
  course_places        CoursePlace[]

  @@map("places")
}

model CoursePlace {
  id                 Int      @id @default(autoincrement())
  course_id          Int
  place_id           Int
  order_index        Int
  estimated_duration Int?
  recommended_time   String?  @db.VarChar(100)
  notes              String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  course             Courses  @relation(fields: [course_id], references: [id])
  places             Place    @relation(fields: [place_id], references: [id])

  @@map("course_places")
}

model Highlight {
  id          Int      @id @default(autoincrement())
  course_id   Int
  title       String   @db.VarChar(255)
  description String?
  icon        String?  @db.VarChar(10)
  created_at  DateTime @default(now())
  course      Courses  @relation(fields: [course_id], references: [id])

  @@map("highlights")
}

model Benefit {
  id            Int      @id @default(autoincrement())
  course_id     Int
  benefit_text  String
  category      String?  @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  course        Courses  @relation(fields: [course_id], references: [id])

  @@map("benefits")
}

model Notice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  course        Courses  @relation(fields: [course_id], references: [id])

  @@map("notices")
}

model CourseNotice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  course        Courses  @relation(fields: [course_id], references: [id])

  @@map("course_notices")
}

model Contact {
  id          Int      @id @default(autoincrement())
  course_id   Int
  type        String?  @db.VarChar(100)
  icon        String?  @db.VarChar(10)
  label       String?  @db.VarChar(255)
  value       String?  @db.VarChar(500)
  description String?
  created_at  DateTime @default(now())
  course      Courses  @relation(fields: [course_id], references: [id])

  @@map("contacts")
}

// Escape feature models
model Badge {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String?
  image_url   String? @db.VarChar(500)
  stories     Story[] @relation("StoryRewardBadge")

  @@map("badges")
}

model Story {
  id                       Int                   @id @default(autoincrement())
  title                    String                @db.VarChar(255)
  synopsis                 String?
  region                   String?               @db.VarChar(100)
  estimated_duration_min   Int?
  price                    String?               @db.VarChar(100)
  reward_badge_id          Int?
  is_active                Boolean               @default(true)
  created_at               DateTime              @default(now())
  updated_at               DateTime              @updatedAt
  imageUrl                 String?
  level                    Int?                  @default(1)
  reward_badge             Badge?                @relation("StoryRewardBadge", fields: [reward_badge_id], references: [id])
  chapters                 StoryChapter[]
  userStoryProgress        UserStoryProgress[]

  @@map("stories")
}

model StoryChapter {
  id              Int                 @id @default(autoincrement())
  story_id        Int
  chapter_number  Int
  title           String              @db.VarChar(255)
  location_name   String?             @db.VarChar(255)
  address         String?
  latitude        Float?
  longitude       Float?
  story_text      String?
  mission_type    String?             @db.VarChar(50)
  mission_payload Json?
  puzzle_text     String?
  story           Story               @relation(fields: [story_id], references: [id])
  // --- ⬇️ 추가된 부분 ⬇️ ---
  submissions     MissionSubmission[]

  @@unique([story_id, chapter_number])
  @@map("storychapters")
}

model UserStoryProgress {
  id              Int       @id @default(autoincrement())
  user_id         Int
  story_id        Int
  current_chapter Int
  status          String    @db.VarChar(30)
  started_at      DateTime?
  completed_at    DateTime?
  story           Story     @relation(fields: [story_id], references: [id])
  user            User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, story_id])
  @@map("userstoryprogress")
}

// --- ⬇️ 추가된 모델 ⬇️ ---
model MissionSubmission {
  id          Int          @id @default(autoincrement())
  userId      Int          @map("user_id")
  chapterId   Int          @map("chapter_id")
  photoUrl    String?      @map("photo_url") @db.Text
  textAnswer  String?      @map("text_answer") @db.Text
  isCorrect   Boolean      @default(false) @map("is_correct")
  createdAt   DateTime     @default(now()) @map("created_at")

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter StoryChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@map("mission_submissions")
}