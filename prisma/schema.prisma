generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique @db.VarChar(100)
  password        String?   @db.VarChar(255)
  nickname        String    @db.VarChar(50)
  profileImageUrl String?   @db.VarChar(255)
  socialId        String?   @db.VarChar(255)
  provider        String    @default("local") @db.VarChar(20)
  createdAt       DateTime  @default(now()) @db.Timestamp(0)
  updatedAt       DateTime  @updatedAt @db.Timestamp(0)
  mbti            String?   @db.VarChar(20)
  age             Int?
  reviews         Review[]
  courses         Courses[]

  @@index([provider, socialId])
}

model Courses {
  id                   Int            @id @default(autoincrement())
  userId               Int?
  title                String         @db.VarChar(100)
  description          String?
  imageUrl             String?        @db.VarChar(255)
  region               String?        @db.VarChar(50)
  duration             String?        @db.VarChar(45)
  price                String?        @db.VarChar(45)
  concept              String?        @db.VarChar(45)
  isPopular            Boolean        @default(false)
  rating               Decimal        @default(0.0)
  current_participants Int            @default(0)
  max_participants     Int            @default(0)
  view_count           Int            @default(0)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  reviews              Review[]
  benefits             Benefit[]
  course_notices       CourseNotice[]
  course_places        CoursePlace[]
  creator              User?          @relation(fields: [userId], references: [id])
  highlights           Highlight[]
  notices              Notice[]
  tags                 CourseTag[]    @relation("CourseTagToCourses")

  @@map("courses")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  course    Courses  @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Booking {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  courseId     String   @map("course_id") @db.VarChar(100)
  courseTitle  String   @map("course_title") @db.VarChar(255)
  bookingDate  DateTime @map("booking_date")
  status       String   @db.VarChar(45)
  price        String   @db.VarChar(50)
  participants Int
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("bookings")
}

model UserPreferences {
  id          Int      @id @default(autoincrement())
  userId      String   @unique @db.VarChar(100)
  preferences Json     @db.Json
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @db.Timestamp(0)

  @@map("user_preferences")
}

model UserBehavior {
  id                   Int             @id @default(autoincrement())
  userId               String          @unique @db.VarChar(100)
  viewedCourses        Json            @default("[]") @db.Json
  bookedCourses        Json            @default("[]") @db.Json
  likedCourses         Json            @default("[]") @db.Json
  searchHistory        Json            @default("[]") @db.Json
  timeSpent            Json            @default("{}") @db.Json
  preferences          Json            @default("{}") @db.Json
  lastActiveAt         DateTime        @default(now()) @db.Timestamp(0)
  lastRecommendationAt DateTime?
  createdAt            DateTime        @default(now()) @db.Timestamp(0)
  updatedAt            DateTime        @updatedAt @db.Timestamp(0)
  trackingEvents       TrackingEvent[]

  @@map("user_behavior")
}

model TrackingEvent {
  id           Int          @id @default(autoincrement())
  userId       String       @db.VarChar(100)
  eventType    String       @db.VarChar(50)
  courseId     String?      @db.VarChar(100)
  searchQuery  String?
  timeSpent    Int?
  metadata     Json         @default("{}") @db.Json
  timestamp    DateTime     @default(now()) @db.Timestamp(0)
  userBehavior UserBehavior @relation(fields: [userId], references: [userId])

  @@map("tracking_events")
}

model CourseTag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  courses   Courses[] @relation("CourseTagToCourses")

  @@map("course_tags")
}

/// Places table
model Place {
  id                   Int           @id @default(autoincrement())
  name                 String        @db.VarChar(255)
  address              String?       @db.VarChar(500)
  description          String?
  category             String?       @db.VarChar(100)
  avg_cost_range       String?       @db.VarChar(100)
  opening_hours        String?       @db.VarChar(200)
  phone                String?       @db.VarChar(50)
  website              String?       @db.VarChar(500)
  parking_available    Boolean?      @default(false)
  reservation_required Boolean?      @default(false)
  latitude             Decimal?      @db.Decimal(10, 8)
  longitude            Decimal?      @db.Decimal(11, 8)
  imageUrl             String?       @db.VarChar(500)
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  course_places        CoursePlace[]

  @@map("places")
}

/// Courses - Places pivot
model CoursePlace {
  id                 Int      @id @default(autoincrement())
  course_id          Int
  place_id           Int
  order_index        Int
  estimated_duration Int?
  recommended_time   String?  @db.VarChar(100)
  notes              String?
  created_at         DateTime @default(now()) @db.Timestamp(0)
  updated_at         DateTime @updatedAt @db.Timestamp(0)
  course             Courses  @relation(fields: [course_id], references: [id])
  places             Place    @relation(fields: [place_id], references: [id])

  @@map("course_places")
}

model Highlight {
  id          Int      @id @default(autoincrement())
  course_id   Int
  title       String   @db.VarChar(255)
  description String?
  icon        String?  @db.VarChar(10)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  course      Courses  @relation(fields: [course_id], references: [id])

  @@map("highlights")
}

model Benefit {
  id            Int      @id @default(autoincrement())
  course_id     Int
  benefit_text  String
  category      String?  @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  course        Courses  @relation(fields: [course_id], references: [id])

  @@map("benefits")
}

model Notice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  course        Courses  @relation(fields: [course_id], references: [id])

  @@map("notices")
}

model CourseNotice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @updatedAt @db.Timestamp(0)
  course        Courses  @relation(fields: [course_id], references: [id])

  @@map("course_notices")
}

model Contact {
  id          Int      @id @default(autoincrement())
  course_id   Int
  type        String?  @db.VarChar(100)
  icon        String?  @db.VarChar(10)
  label       String?  @db.VarChar(255)
  value       String?  @db.VarChar(500)
  description String?
  created_at  DateTime @default(now()) @db.Timestamp(0)

  @@map("contacts")
}

model UserFavorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@unique([user_id, course_id])
  @@map("user_favorites")
}
