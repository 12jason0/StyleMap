generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String?             @unique @db.VarChar(191)
  password          String?             @db.VarChar(255)
  nickname          String              @db.VarChar(50)
  profileImageUrl   String?
  socialId          String?             @db.VarChar(255)
  provider          String              @default("local") @db.VarChar(20)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  mbti              String?             @db.VarChar(20)
  age               Int?
  reviews           Review[]
  courses           Courses[]
  user_story_progress UserStoryProgress[]
  preferences       UserPreferences?
  user_favorites    UserFavorite[]
  bookings          Booking[]

  @@index([provider, socialId])
  @@map("users")
}

model Courses {
  id                     Int            @id @default(autoincrement())
  userId                 Int?
  title                  String         @db.VarChar(100)
  description            String?        @db.Text
  imageUrl               String?        @db.VarChar(255)
  region                 String?        @db.VarChar(50)
  duration               String?        @db.VarChar(45)
  price                  String?        @db.VarChar(100)
  concept                String?        @db.VarChar(45)
  isPopular              Boolean        @default(false)
  rating                 Decimal        @default(0.0) @db.Decimal(3, 2)
  current_participants   Int            @default(0)
  max_participants       Int            @default(0)
  view_count             Int            @default(0)
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  reviews                Review[]
  benefits               Benefit[]
  course_notices         CourseNotice[]
  course_places          CoursePlace[]
  creator                User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  highlights             Highlight[]
  user_favorites         UserFavorite[]
  tags                   CourseTag[]    @relation("CourseTagToCourses")
  bookings               Booking[]
  contacts               Contact[]

  @@map("courses")
}

model Review {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  rating     Int
  comment    String?  @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Booking {
  id            Int      @id @default(autoincrement())
  user_id       Int
  course_id     Int
  course_title  String   @db.VarChar(255)
  booking_date  DateTime @db.Date
  status        String   @db.VarChar(45)
  price         String   @db.VarChar(50)
  participants  Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course        Courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model UserPreferences {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  preferences  Json
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("user_preferences")
}

model UserFavorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  course     Courses  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id], map: "unique_user_course")
  @@map("user_favorites")
}