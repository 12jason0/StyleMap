generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String?             @unique @db.VarChar(191)
  password           String?             @db.VarChar(255)
  username           String              @map("nickname") @db.VarChar(50)
  profileImageUrl    String?
  socialId           String?             @db.VarChar(255)
  provider           String              @default("local") @db.VarChar(20)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  mbti               String?             @db.VarChar(20)
  age                Int?
  coinBalance        Int                 @default(0)
  couponCount        Int                 @default(0)
  gender             String?             @db.VarChar(10)
  lastActiveAt       DateTime?
  level              Int                 @default(1)
  location           String?             @db.VarChar(100)
  preferredTags      String[]
  completedCourses   CompletedCourse[]
  completedEscapes   CompletedEscape[]
  bookings           Booking[]
  courses            Course[]
  garden             Garden?
  missionSubmissions MissionSubmission[]
  reviews            Review[]
  trees              Tree[]
  userBadges         UserBadge[]
  checkins           UserCheckin[]
  UserCollage        UserCollage[]
  userFavorites      UserFavorite[]
  interactions       UserInteraction[]
  userPreference     UserPreference?
  rewards            UserReward[]
  userStoryProgress  UserStoryProgress[]
  waterLogs          WaterLog[]

  @@index([provider, socialId])
  @@map("users")
}

model UserReward {
  id        Int        @id @default(autoincrement())
  amount    Int
  createdAt DateTime   @default(now())
  userId    Int
  type      RewardType
  unit      RewardUnit
  user      User       @relation(fields: [userId], references: [id])

  @@map("user_rewards")
}

model UserCheckin {
  id        Int      @id @default(autoincrement())
  date      DateTime
  rewarded  Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_checkins")
}

model UserInteraction {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  action    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_interactions")
}

model UserPreference {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique @map("user_id")
  preferences Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Course {
  id                   Int                  @id @default(autoincrement())
  userId               Int?
  title                String               @db.VarChar(100)
  description          String?
  imageUrl             String?              @db.VarChar(255)
  region               String?              @db.VarChar(50)
  duration             String?              @db.VarChar(45)
  concept              String?              @db.VarChar(45)
  isPopular            Boolean              @default(false)
  rating               Float                @default(0.0)
  current_participants Int                  @default(0)
  max_participants     Int                  @default(0)
  view_count           Int                  @default(0)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  completedCourses     CompletedCourse[]
  CourseTagToCourses   CourseTagToCourses[]
  benefits             Benefit[]
  bookings             Booking[]
  courseNotices        CourseNotice[]
  coursePlaces         CoursePlace[]
  user                 User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  highlights           Highlight[]
  reviews              Review[]
  userFavorites        UserFavorite[]
  interactions         UserInteraction[]

  @@map("courses")
}

model Place {
  id                   Int           @id @default(autoincrement())
  name                 String        @db.VarChar(255)
  address              String?       @db.VarChar(500)
  description          String?
  category             String?       @db.VarChar(100)
  avg_cost_range       String?       @db.VarChar(100)
  opening_hours        String?       @db.VarChar(200)
  phone                String?       @db.VarChar(50)
  website              String?       @db.VarChar(500)
  parking_available    Boolean?      @default(false)
  reservation_required Boolean?      @default(false)
  latitude             Float?
  longitude            Float?
  imageUrl             String?       @db.VarChar(500)
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  tags                 String?
  coursePlaces         CoursePlace[]

  @@map("places")
}

model CourseTag {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(100)
  createdAt          DateTime             @default(now())
  CourseTagToCourses CourseTagToCourses[]

  @@map("course_tags")
}

model Story {
  id                     Int                 @id @default(autoincrement())
  title                  String              @db.VarChar(255)
  synopsis               String?
  region                 String?             @db.VarChar(100)
  estimated_duration_min Int?
  price                  String?             @db.VarChar(100)
  reward_badge_id        Int?
  is_active              Boolean             @default(true)
  created_at             DateTime            @default(now())
  updated_at             DateTime            @updatedAt
  imageUrl               String?
  level                  Int?                @default(1)
  epilogue_text          String?
  stationName            String?             @db.VarChar(100)
  stationLat             Float?
  stationLng             Float?
  scenario               String?
  completedEscapes       CompletedEscape[]
  placeDialogues         PlaceDialogue[]
  CollageTemplate        CollageTemplate[]
  reward_badge           Badge?              @relation(fields: [reward_badge_id], references: [id])
  userstoryprogress      UserStoryProgress[]

  @@map("stories")
}

model PlaceOption {
  id             Int             @id @default(autoincrement())
  storyId        Int
  name           String
  address        String?
  latitude       Float?
  longitude      Float?
  description    String?
  imageUrl       String?
  category       String?
  signature      String?
  placeDialogues PlaceDialogue[]
  missions       PlaceMission[]
  stories        PlaceStory[]
}

model PlaceDialogue {
  id          Int          @id @default(autoincrement())
  storyId     Int
  placeId     Int?
  order       Int          @default(1)
  type        String       @default("main")
  speaker     String?
  message     String
  imageUrl    String?
  createdAt   DateTime     @default(now())
  isLetter    Boolean      @default(false)
  letterIndex Int?
  role        SpeakerRole  @default(npc)
  place       PlaceOption? @relation(fields: [placeId], references: [id])
  story       Story        @relation(fields: [storyId], references: [id])
}

model PlaceMission {
  id             Int         @id @default(autoincrement())
  placeId        Int
  missionNumber  Int
  missionPayload Json?
  description    String?
  answer         String?
  hint           String?
  question       String?
  missionType    MissionType
  place          PlaceOption @relation(fields: [placeId], references: [id])
}

model PlaceStory {
  id          Int         @id @default(autoincrement())
  placeId     Int
  order       Int
  speaker     String?
  dialogue    String?
  narration   String?
  nextTrigger String?
  place       PlaceOption @relation(fields: [placeId], references: [id])
}

model UserCollage {
  id           Int              @id @default(autoincrement())
  userId       Int
  templateId   Int?
  collageUrl   String           @map("collage_url")
  thumbnailUrl String?          @map("thumbnail_url")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  storyId      Int?
  template     CollageTemplate? @relation(fields: [templateId], references: [id])
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_collages")
}

model CollageTemplate {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(50)
  imageUrl    String?       @map("image_url")
  framesJson  Json?         @map("frames_json")
  isPublic    Boolean       @default(true) @map("is_public")
  createdAt   DateTime      @default(now()) @map("created_at")
  storyId     Int?
  story       Story?        @relation(fields: [storyId], references: [id], onDelete: Cascade)
  userCollage UserCollage[]

  @@map("collage_templates")
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(100)
  description String?
  image_url   String?     @db.VarChar(500)
  stories     Story[]
  userBadges  UserBadge[]

  @@map("badges")
}

model CompletedCourse {
  id          Int      @id @default(autoincrement())
  userId      Int
  courseId    Int
  completedAt DateTime @default(now())
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("CompletedCourses")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Booking {
  id           Int      @id @default(autoincrement())
  user_id      Int
  course_title String   @db.VarChar(255)
  booking_date DateTime @db.Date
  status       String   @db.VarChar(45)
  price        String   @db.VarChar(50)
  participants Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  course_id    Int
  course       Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model UserFavorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  course_id  Int
  created_at DateTime @default(now())
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, course_id], name: "unique_user_course", map: "unique_user_course")
  @@map("user_favorites")
}

model CoursePlace {
  id                 Int      @id @default(autoincrement())
  course_id          Int
  place_id           Int
  order_index        Int
  estimated_duration Int?
  recommended_time   String?  @db.VarChar(100)
  notes              String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  course             Course   @relation(fields: [course_id], references: [id])
  place              Place    @relation(fields: [place_id], references: [id])

  @@map("course_places")
}

model Highlight {
  id          Int      @id @default(autoincrement())
  course_id   Int
  title       String   @db.VarChar(255)
  description String?
  icon        String?  @db.VarChar(10)
  created_at  DateTime @default(now())
  course      Course   @relation(fields: [course_id], references: [id])

  @@map("highlights")
}

model Benefit {
  id            Int      @id @default(autoincrement())
  course_id     Int
  benefit_text  String
  category      String?  @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  course        Course   @relation(fields: [course_id], references: [id])

  @@map("benefits")
}

model CourseNotice {
  id            Int      @id @default(autoincrement())
  course_id     Int
  notice_text   String
  type          String?  @default("info") @db.VarChar(100)
  display_order Int?     @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  course        Course   @relation(fields: [course_id], references: [id])

  @@map("course_notices")
}

model UserStoryProgress {
  id              Int       @id @default(autoincrement())
  user_id         Int
  story_id        Int
  current_chapter Int
  status          String    @db.VarChar(30)
  started_at      DateTime?
  completed_at    DateTime?
  story           Story     @relation(fields: [story_id], references: [id])
  user            User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, story_id])
  @@map("userstoryprogress")
}

model MissionSubmission {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  chapterId  Int      @map("chapter_id")
  photoUrl   String?  @map("photo_url")
  textAnswer String?  @map("text_answer")
  isCorrect  Boolean  @default(false) @map("is_correct")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mission_submissions")
}

model UserBadge {
  id         Int      @id @default(autoincrement())
  user_id    Int
  badge_id   Int
  awarded_at DateTime @default(now())
  badge      Badge    @relation(fields: [badge_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_id])
  @@map("user_badges")
}

model CompletedEscape {
  id          Int      @id @default(autoincrement())
  userId      Int
  storyId     Int
  completedAt DateTime @default(now())
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("CompletedEscapes")
}

model CourseTagToCourses {
  A           Int
  B           Int
  courses     Course    @relation(fields: [A], references: [id], onDelete: Cascade)
  course_tags CourseTag @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_CourseTagToCourses_AB_pkey")
  @@index([B], map: "_CourseTagToCourses_B_index")
  @@map("_CourseTagToCourses")
}

model Tree {
  id          Int         @id @default(autoincrement())
  userId      Int
  name        String?     @db.VarChar(100)
  variant     String?     @db.VarChar(50)
  waterCount  Int         @default(0)
  status      TreeStatus  @default(seedling)
  createdAt   DateTime    @default(now())
  completedAt DateTime?
  updatedAt   DateTime    @updatedAt
  gardenTree  GardenTree?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  waterLogs   WaterLog[]

  @@index([userId])
  @@map("trees")
}

model WaterLog {
  id        Int         @id @default(autoincrement())
  userId    Int
  treeId    Int
  amount    Int
  source    WaterSource
  meta      Json?
  createdAt DateTime    @default(now())
  tree      Tree        @relation(fields: [treeId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([treeId])
  @@map("water_logs")
}

model Garden {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  name        String?      @db.VarChar(100)
  isUnlocked  Boolean      @default(false)
  openedAt    DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  gardenTrees GardenTree[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("gardens")
}

model GardenTree {
  id        Int      @id @default(autoincrement())
  gardenId  Int
  treeId    Int?     @unique
  posX      Float    @default(0)
  posY      Float    @default(0)
  posZ      Float    @default(0)
  rotX      Float    @default(0)
  rotY      Float    @default(0)
  rotZ      Float    @default(0)
  scale     Float    @default(1)
  placedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  garden    Garden   @relation(fields: [gardenId], references: [id], onDelete: Cascade)
  tree      Tree?    @relation(fields: [treeId], references: [id], onDelete: Cascade)

  @@index([gardenId])
  @@map("garden_trees")
}

enum ChapterType {
  intro
  restaurant
  cafe
  spot
  final_spot
  ending
}

enum MissionType {
  quiz
  photo
  gps
  puzzle
  text
  choice
}

enum RewardType {
  signup
  checkin
  ad_watch
  purchase
  event
}

enum RewardUnit {
  coin
  coupon
}

enum SpeakerRole {
  user
  npc
  system
}

enum TreeStatus {
  seedling
  growing
  completed
}

enum WaterSource {
  course
  escape
  admin
  bonus
}
